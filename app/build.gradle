apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {

    signingConfigs {
        nopstation {
            keyAlias 'nopStation'
            keyPassword '159753246'
            storeFile file('/Users/rarahat/Desktop/BS_Android_Projects/nopstation-kotlin/app/playstore_info/nopstation/keystore.jks')
            storePassword '159753246'
        }
    }

    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.bs.ecommerce"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"


        buildConfigField "String", "BASE_URL", "\"" + getBaseUrl() + "\""

        buildConfigField "String", "NST_KEY", getNstKey()
        buildConfigField "String", "NST_SECRET",  getSecret()

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    bundle {
        language {
            // Specifies that the app bundle should not support
            // configuration APKs for language resources. These
            // resources are instead packaged with each base and
            // dynamic feature APK.
            enableSplit = false
        }
    }

    flavorDimensions "app"
    productFlavors {
        flavorNopStation {
            applicationId "com.bs.ecommerce.nopstationv2"
            versionCode 1000000
            versionName "1.0.0"
            dimension "app"
            signingConfig signingConfigs.nopstation
        }
    }


    kotlinOptions {
        jvmTarget = "1.8"
    }

    compileOptions {
        targetCompatibility = "8"
        sourceCompatibility = "8"
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'


    implementation 'androidx.vectordrawable:vectordrawable-animated:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'com.github.JakeWharton:ViewPagerIndicator:2.4.1'
    implementation 'io.github.inflationx:viewpump:2.0.3'

    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.anko:anko:$anko_version"
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'com.orhanobut:logger:2.2.0'

    //  Rx Permission
    implementation 'com.github.tbruyelle:rxpermissions:0.10.2'

    //  retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation 'com.squareup.okhttp3:logging-interceptor:4.2.2'
    compileOnly 'javax.annotation:jsr250-api:1.0'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation "com.google.code.gson:gson:$gson_version"


    // architecture component
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.2.0'

    // Picasso
    implementation 'com.squareup.picasso:picasso:2.5.0'

    // Jjwt
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    implementation 'com.facebook.android:facebook-android-sdk:5.8.0'



    implementation 'com.pixplicity.easyprefs:library:1.9.0'
    implementation 'com.github.ittianyu:BottomNavigationViewEx:2.0.2'
    implementation 'com.binjar.prefsdroid:prefs-droid:1.1.0'
    implementation 'com.daimajia.slider:library:1.1.5@aar'
    implementation 'com.nineoldandroids:library:2.4.0'

    implementation('com.github.ihsanbal:LoggingInterceptor:3.0.0') { // HTTP pretty log printing library
        exclude group: 'org.json', module: 'json'
    }

    implementation 'com.pnikosis:materialish-progress:1.7'

    //barcode
    implementation 'com.journeyapps:zxing-android-embedded:4.0.0'

    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'

    //firebase
    implementation 'com.google.firebase:firebase-core:17.4.2'
    implementation 'com.google.firebase:firebase-messaging:20.2.0'

    // Dynamically change string.xml values
    implementation 'com.ice.restring:restring:1.0.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

apply plugin: 'com.google.gms.google-services'

def getNstKey() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    String nst = properties.getProperty("NST_KEY")
    return nst
}
def getSecret() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    String secret = properties.getProperty("NST_SECRET")
    return secret
}


def getBaseUrl() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    String baseUrl = properties.getProperty("base_url")
    return baseUrl
}